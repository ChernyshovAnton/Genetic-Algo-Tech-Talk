  SHOWCASE:
    Population: GENETIC DIVERSITY
      population 10, cross .5, mutation 0    // bad, low diversity, local max problem
      population 100, cross .5, mutation 0   // good, high genetic diversity

    Crossover: 
      population 50, cross 0, mutation 0     // bad, local max problem
      population 50, cross 0.1, mutation 0   // bad, local max problem
      population 50, cross .5, mutation 0    // pretty decent solver
      population 50, cross 1, mutation 0     // bad, optimization/convergence problem

    Mutation:
      population 100, cross .3, mutation 0   // very nice solver
      population 100, cross .3, mutation 100 // a terrible, terrible solver 
*******************************************

Order of operations:
  Start with a population of potential solutions (routes)
  To create next gen:
    select two individuals- element of randomness, but should be biased toward fittest
    breed:
      1. Decide if they will exchange DNA, if not pass clones to next step
      2. Apply mutation to each clone
      3. Repeat 1-2 until you have new population of same size as old one

    In the case of my demo, I will actually be displaying:
      Fittest individual (route) in our current generation
      Fittest individual ever produced by this run of the algorithm

*******************************************

PRESENTATION OUTLINE
  WHAT IS A GENETIC ALGORITHM?

  HOW DOES IT WORK?
    1.  First, decide how to represent individual solutions to a problem as 'DNA'
    2.  Generate a 'population' of possible solutions
    3.  Randomly select pairs of solutions from this population to 'mate'
    4.  Randomly 'mutate' the child solutions
    5.  Repeat 2-4 until you have a new population, or 'generation' of child solutions

    With a well-implemented algorithm

    You're probably wondering- how do our solutions get better over time if we 

  CROSSOVER
    low : increases convergence speed (fittest are likely to survive as-is to next gen)
          decreases exploratory power (easy to get stuck in local optimum)
          nobody having kids - next gen is clones; unlikely to get a fit cross

    high: decreases convergence speed (fittest unlikely to survive as-is)
          increases exploratory power (many crosses means a diverse population)
          the fittest have lower influence; sometimes you want them to just survive

  MUTATION
    seems to slow us down on average 
    what makes it worth it? helps prevent the local maximum problem
 
    low : rely on fit-biased selection and crossover (increase convergence speed)
    high: slower (increasingly impossible) convergence, increase exploratory power

  END
    optimization tweaks (elitism)
    use cases: 
      mario, teaching bots to walk, 
      engineering hardware (vibration damping supports that look like leg bones)
  
ultimate tradeoff: fast convergence vs. exploratory power
